// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/damianoneill/go-bootstrap/pkg/domain/logging (interfaces: Logger,LeveledLogger)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_logger.go -package=mocks github.com/damianoneill/go-bootstrap/pkg/domain/logging Logger,LeveledLogger
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	logging "github.com/damianoneill/go-bootstrap/pkg/domain/logging"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
	isgomock struct{}
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", msg)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), msg)
}

// DebugWith mocks base method.
func (m *MockLogger) DebugWith(msg string, fields logging.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DebugWith", msg, fields)
}

// DebugWith indicates an expected call of DebugWith.
func (mr *MockLoggerMockRecorder) DebugWith(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugWith", reflect.TypeOf((*MockLogger)(nil).DebugWith), msg, fields)
}

// Error mocks base method.
func (m *MockLogger) Error(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", msg)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), msg)
}

// ErrorWith mocks base method.
func (m *MockLogger) ErrorWith(msg string, fields logging.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorWith", msg, fields)
}

// ErrorWith indicates an expected call of ErrorWith.
func (mr *MockLoggerMockRecorder) ErrorWith(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorWith", reflect.TypeOf((*MockLogger)(nil).ErrorWith), msg, fields)
}

// Info mocks base method.
func (m *MockLogger) Info(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", msg)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), msg)
}

// InfoWith mocks base method.
func (m *MockLogger) InfoWith(msg string, fields logging.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InfoWith", msg, fields)
}

// InfoWith indicates an expected call of InfoWith.
func (mr *MockLoggerMockRecorder) InfoWith(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoWith", reflect.TypeOf((*MockLogger)(nil).InfoWith), msg, fields)
}

// Warn mocks base method.
func (m *MockLogger) Warn(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", msg)
}

// Warn indicates an expected call of Warn.
func (mr *MockLoggerMockRecorder) Warn(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLogger)(nil).Warn), msg)
}

// WarnWith mocks base method.
func (m *MockLogger) WarnWith(msg string, fields logging.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WarnWith", msg, fields)
}

// WarnWith indicates an expected call of WarnWith.
func (mr *MockLoggerMockRecorder) WarnWith(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnWith", reflect.TypeOf((*MockLogger)(nil).WarnWith), msg, fields)
}

// With mocks base method.
func (m *MockLogger) With(fields logging.Fields) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", fields)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLoggerMockRecorder) With(fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLogger)(nil).With), fields)
}

// WithContext mocks base method.
func (m *MockLogger) WithContext(ctx context.Context) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockLoggerMockRecorder) WithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockLogger)(nil).WithContext), ctx)
}

// MockLeveledLogger is a mock of LeveledLogger interface.
type MockLeveledLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLeveledLoggerMockRecorder
	isgomock struct{}
}

// MockLeveledLoggerMockRecorder is the mock recorder for MockLeveledLogger.
type MockLeveledLoggerMockRecorder struct {
	mock *MockLeveledLogger
}

// NewMockLeveledLogger creates a new mock instance.
func NewMockLeveledLogger(ctrl *gomock.Controller) *MockLeveledLogger {
	mock := &MockLeveledLogger{ctrl: ctrl}
	mock.recorder = &MockLeveledLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeveledLogger) EXPECT() *MockLeveledLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLeveledLogger) Debug(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", msg)
}

// Debug indicates an expected call of Debug.
func (mr *MockLeveledLoggerMockRecorder) Debug(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLeveledLogger)(nil).Debug), msg)
}

// DebugWith mocks base method.
func (m *MockLeveledLogger) DebugWith(msg string, fields logging.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DebugWith", msg, fields)
}

// DebugWith indicates an expected call of DebugWith.
func (mr *MockLeveledLoggerMockRecorder) DebugWith(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugWith", reflect.TypeOf((*MockLeveledLogger)(nil).DebugWith), msg, fields)
}

// Error mocks base method.
func (m *MockLeveledLogger) Error(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", msg)
}

// Error indicates an expected call of Error.
func (mr *MockLeveledLoggerMockRecorder) Error(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLeveledLogger)(nil).Error), msg)
}

// ErrorWith mocks base method.
func (m *MockLeveledLogger) ErrorWith(msg string, fields logging.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ErrorWith", msg, fields)
}

// ErrorWith indicates an expected call of ErrorWith.
func (mr *MockLeveledLoggerMockRecorder) ErrorWith(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorWith", reflect.TypeOf((*MockLeveledLogger)(nil).ErrorWith), msg, fields)
}

// GetLevel mocks base method.
func (m *MockLeveledLogger) GetLevel() logging.Level {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLevel")
	ret0, _ := ret[0].(logging.Level)
	return ret0
}

// GetLevel indicates an expected call of GetLevel.
func (mr *MockLeveledLoggerMockRecorder) GetLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLevel", reflect.TypeOf((*MockLeveledLogger)(nil).GetLevel))
}

// Info mocks base method.
func (m *MockLeveledLogger) Info(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", msg)
}

// Info indicates an expected call of Info.
func (mr *MockLeveledLoggerMockRecorder) Info(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLeveledLogger)(nil).Info), msg)
}

// InfoWith mocks base method.
func (m *MockLeveledLogger) InfoWith(msg string, fields logging.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InfoWith", msg, fields)
}

// InfoWith indicates an expected call of InfoWith.
func (mr *MockLeveledLoggerMockRecorder) InfoWith(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoWith", reflect.TypeOf((*MockLeveledLogger)(nil).InfoWith), msg, fields)
}

// SetLevel mocks base method.
func (m *MockLeveledLogger) SetLevel(level logging.Level) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLevel", level)
}

// SetLevel indicates an expected call of SetLevel.
func (mr *MockLeveledLoggerMockRecorder) SetLevel(level any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLevel", reflect.TypeOf((*MockLeveledLogger)(nil).SetLevel), level)
}

// Warn mocks base method.
func (m *MockLeveledLogger) Warn(msg string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", msg)
}

// Warn indicates an expected call of Warn.
func (mr *MockLeveledLoggerMockRecorder) Warn(msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockLeveledLogger)(nil).Warn), msg)
}

// WarnWith mocks base method.
func (m *MockLeveledLogger) WarnWith(msg string, fields logging.Fields) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WarnWith", msg, fields)
}

// WarnWith indicates an expected call of WarnWith.
func (mr *MockLeveledLoggerMockRecorder) WarnWith(msg, fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnWith", reflect.TypeOf((*MockLeveledLogger)(nil).WarnWith), msg, fields)
}

// With mocks base method.
func (m *MockLeveledLogger) With(fields logging.Fields) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "With", fields)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockLeveledLoggerMockRecorder) With(fields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockLeveledLogger)(nil).With), fields)
}

// WithContext mocks base method.
func (m *MockLeveledLogger) WithContext(ctx context.Context) logging.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithContext", ctx)
	ret0, _ := ret[0].(logging.Logger)
	return ret0
}

// WithContext indicates an expected call of WithContext.
func (mr *MockLeveledLoggerMockRecorder) WithContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithContext", reflect.TypeOf((*MockLeveledLogger)(nil).WithContext), ctx)
}
