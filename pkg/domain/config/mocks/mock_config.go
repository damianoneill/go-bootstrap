// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/damianoneill/go-bootstrap/pkg/domain/config (interfaces: Store,Factory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_config.go -package=mocks github.com/damianoneill/go-bootstrap/pkg/domain/config Store,Factory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"

	config "github.com/damianoneill/go-bootstrap/pkg/domain/config"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
	isgomock struct{}
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// GetBool mocks base method.
func (m *MockStore) GetBool(key string) (bool, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBool", key)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetBool indicates an expected call of GetBool.
func (mr *MockStoreMockRecorder) GetBool(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBool", reflect.TypeOf((*MockStore)(nil).GetBool), key)
}

// GetDuration mocks base method.
func (m *MockStore) GetDuration(key string) (time.Duration, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration", key)
	ret0, _ := ret[0].(time.Duration)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetDuration indicates an expected call of GetDuration.
func (mr *MockStoreMockRecorder) GetDuration(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockStore)(nil).GetDuration), key)
}

// GetFloat64 mocks base method.
func (m *MockStore) GetFloat64(key string) (float64, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFloat64", key)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetFloat64 indicates an expected call of GetFloat64.
func (mr *MockStoreMockRecorder) GetFloat64(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFloat64", reflect.TypeOf((*MockStore)(nil).GetFloat64), key)
}

// GetInt mocks base method.
func (m *MockStore) GetInt(key string) (int, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInt", key)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetInt indicates an expected call of GetInt.
func (mr *MockStoreMockRecorder) GetInt(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInt", reflect.TypeOf((*MockStore)(nil).GetInt), key)
}

// GetString mocks base method.
func (m *MockStore) GetString(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetString", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetString indicates an expected call of GetString.
func (mr *MockStoreMockRecorder) GetString(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetString", reflect.TypeOf((*MockStore)(nil).GetString), key)
}

// GetStringSlice mocks base method.
func (m *MockStore) GetStringSlice(key string) ([]string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStringSlice", key)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetStringSlice indicates an expected call of GetStringSlice.
func (mr *MockStoreMockRecorder) GetStringSlice(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStringSlice", reflect.TypeOf((*MockStore)(nil).GetStringSlice), key)
}

// IsSet mocks base method.
func (m *MockStore) IsSet(key string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSet", key)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsSet indicates an expected call of IsSet.
func (mr *MockStoreMockRecorder) IsSet(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSet", reflect.TypeOf((*MockStore)(nil).IsSet), key)
}

// ReadConfig mocks base method.
func (m *MockStore) ReadConfig() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadConfig")
	ret0, _ := ret[0].(error)
	return ret0
}

// ReadConfig indicates an expected call of ReadConfig.
func (mr *MockStoreMockRecorder) ReadConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadConfig", reflect.TypeOf((*MockStore)(nil).ReadConfig))
}

// Set mocks base method.
func (m *MockStore) Set(key string, value any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockStoreMockRecorder) Set(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockStore)(nil).Set), key, value)
}

// Unmarshal mocks base method.
func (m *MockStore) Unmarshal(target any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unmarshal", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unmarshal indicates an expected call of Unmarshal.
func (mr *MockStoreMockRecorder) Unmarshal(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unmarshal", reflect.TypeOf((*MockStore)(nil).Unmarshal), target)
}

// UnmarshalKey mocks base method.
func (m *MockStore) UnmarshalKey(key string, target any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalKey", key, target)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalKey indicates an expected call of UnmarshalKey.
func (mr *MockStoreMockRecorder) UnmarshalKey(key, target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalKey", reflect.TypeOf((*MockStore)(nil).UnmarshalKey), key, target)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// NewStore mocks base method.
func (m *MockFactory) NewStore(opts ...config.Option) (config.Store, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewStore", varargs...)
	ret0, _ := ret[0].(config.Store)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStore indicates an expected call of NewStore.
func (mr *MockFactoryMockRecorder) NewStore(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStore", reflect.TypeOf((*MockFactory)(nil).NewStore), opts...)
}
