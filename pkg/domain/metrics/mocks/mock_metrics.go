// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/damianoneill/go-bootstrap/pkg/domain/metrics (interfaces: Collector,Factory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_metrics.go -package=mocks github.com/damianoneill/go-bootstrap/pkg/domain/metrics Collector,Factory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	metrics "github.com/damianoneill/go-bootstrap/pkg/domain/metrics"
)

// MockCollector is a mock of Collector interface.
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorMockRecorder
	isgomock struct{}
}

// MockCollectorMockRecorder is the mock recorder for MockCollector.
type MockCollectorMockRecorder struct {
	mock *MockCollector
}

// NewMockCollector creates a new mock instance.
func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &MockCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollector) EXPECT() *MockCollectorMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockCollector) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockCollectorMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCollector)(nil).Close))
}

// CollectRequestMetrics mocks base method.
func (m *MockCollector) CollectRequestMetrics(method, path string, status int, duration float64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CollectRequestMetrics", method, path, status, duration)
}

// CollectRequestMetrics indicates an expected call of CollectRequestMetrics.
func (mr *MockCollectorMockRecorder) CollectRequestMetrics(method, path, status, duration any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CollectRequestMetrics", reflect.TypeOf((*MockCollector)(nil).CollectRequestMetrics), method, path, status, duration)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// NewCollector mocks base method.
func (m *MockFactory) NewCollector(opts ...metrics.Option) (metrics.Collector, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewCollector", varargs...)
	ret0, _ := ret[0].(metrics.Collector)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCollector indicates an expected call of NewCollector.
func (mr *MockFactoryMockRecorder) NewCollector(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCollector", reflect.TypeOf((*MockFactory)(nil).NewCollector), opts...)
}
