// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/damianoneill/go-bootstrap/pkg/domain/tracing (interfaces: Provider,Factory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_tracing.go -package=mocks github.com/damianoneill/go-bootstrap/pkg/domain/tracing Provider,Factory
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"

	tracing "github.com/damianoneill/go-bootstrap/pkg/domain/tracing"
)

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
	isgomock struct{}
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// IsEnabled mocks base method.
func (m *MockProvider) IsEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsEnabled indicates an expected call of IsEnabled.
func (mr *MockProviderMockRecorder) IsEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEnabled", reflect.TypeOf((*MockProvider)(nil).IsEnabled))
}

// Shutdown mocks base method.
func (m *MockProvider) Shutdown(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockProviderMockRecorder) Shutdown(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockProvider)(nil).Shutdown), ctx)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// HTTPMiddleware mocks base method.
func (m *MockFactory) HTTPMiddleware(operation string) func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HTTPMiddleware", operation)
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// HTTPMiddleware indicates an expected call of HTTPMiddleware.
func (mr *MockFactoryMockRecorder) HTTPMiddleware(operation any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HTTPMiddleware", reflect.TypeOf((*MockFactory)(nil).HTTPMiddleware), operation)
}

// NewProvider mocks base method.
func (m *MockFactory) NewProvider(opts ...tracing.Option) (tracing.Provider, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewProvider", varargs...)
	ret0, _ := ret[0].(tracing.Provider)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewProvider indicates an expected call of NewProvider.
func (mr *MockFactoryMockRecorder) NewProvider(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewProvider", reflect.TypeOf((*MockFactory)(nil).NewProvider), opts...)
}
