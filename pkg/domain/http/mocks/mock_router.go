// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/damianoneill/go-bootstrap/pkg/domain/http (interfaces: Router,Factory)
//
// Generated by this command:
//
//	mockgen -destination=mocks/mock_router.go -package=http github.com/damianoneill/go-bootstrap/pkg/domain/http Router,Factory
//

// Package http is a generated GoMock package.
package http

import (
	http0 "net/http"
	reflect "reflect"

	chi "github.com/go-chi/chi/v5"
	gomock "go.uber.org/mock/gomock"

	http "github.com/damianoneill/go-bootstrap/pkg/domain/http"
)

// MockRouter is a mock of Router interface.
type MockRouter struct {
	ctrl     *gomock.Controller
	recorder *MockRouterMockRecorder
	isgomock struct{}
}

// MockRouterMockRecorder is the mock recorder for MockRouter.
type MockRouterMockRecorder struct {
	mock *MockRouter
}

// NewMockRouter creates a new mock instance.
func NewMockRouter(ctrl *gomock.Controller) *MockRouter {
	mock := &MockRouter{ctrl: ctrl}
	mock.recorder = &MockRouterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRouter) EXPECT() *MockRouterMockRecorder {
	return m.recorder
}

// Connect mocks base method.
func (m *MockRouter) Connect(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Connect", pattern, h)
}

// Connect indicates an expected call of Connect.
func (mr *MockRouterMockRecorder) Connect(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Connect", reflect.TypeOf((*MockRouter)(nil).Connect), pattern, h)
}

// Delete mocks base method.
func (m *MockRouter) Delete(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", pattern, h)
}

// Delete indicates an expected call of Delete.
func (mr *MockRouterMockRecorder) Delete(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRouter)(nil).Delete), pattern, h)
}

// Find mocks base method.
func (m *MockRouter) Find(rctx *chi.Context, method, path string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", rctx, method, path)
	ret0, _ := ret[0].(string)
	return ret0
}

// Find indicates an expected call of Find.
func (mr *MockRouterMockRecorder) Find(rctx, method, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRouter)(nil).Find), rctx, method, path)
}

// Get mocks base method.
func (m *MockRouter) Get(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Get", pattern, h)
}

// Get indicates an expected call of Get.
func (mr *MockRouterMockRecorder) Get(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRouter)(nil).Get), pattern, h)
}

// Group mocks base method.
func (m *MockRouter) Group(fn func(chi.Router)) chi.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Group", fn)
	ret0, _ := ret[0].(chi.Router)
	return ret0
}

// Group indicates an expected call of Group.
func (mr *MockRouterMockRecorder) Group(fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Group", reflect.TypeOf((*MockRouter)(nil).Group), fn)
}

// Handle mocks base method.
func (m *MockRouter) Handle(pattern string, h http0.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Handle", pattern, h)
}

// Handle indicates an expected call of Handle.
func (mr *MockRouterMockRecorder) Handle(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockRouter)(nil).Handle), pattern, h)
}

// HandleFunc mocks base method.
func (m *MockRouter) HandleFunc(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleFunc", pattern, h)
}

// HandleFunc indicates an expected call of HandleFunc.
func (mr *MockRouterMockRecorder) HandleFunc(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleFunc", reflect.TypeOf((*MockRouter)(nil).HandleFunc), pattern, h)
}

// Head mocks base method.
func (m *MockRouter) Head(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Head", pattern, h)
}

// Head indicates an expected call of Head.
func (mr *MockRouterMockRecorder) Head(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Head", reflect.TypeOf((*MockRouter)(nil).Head), pattern, h)
}

// Match mocks base method.
func (m *MockRouter) Match(rctx *chi.Context, method, path string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", rctx, method, path)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockRouterMockRecorder) Match(rctx, method, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockRouter)(nil).Match), rctx, method, path)
}

// Method mocks base method.
func (m *MockRouter) Method(method, pattern string, h http0.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Method", method, pattern, h)
}

// Method indicates an expected call of Method.
func (mr *MockRouterMockRecorder) Method(method, pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Method", reflect.TypeOf((*MockRouter)(nil).Method), method, pattern, h)
}

// MethodFunc mocks base method.
func (m *MockRouter) MethodFunc(method, pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MethodFunc", method, pattern, h)
}

// MethodFunc indicates an expected call of MethodFunc.
func (mr *MockRouterMockRecorder) MethodFunc(method, pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodFunc", reflect.TypeOf((*MockRouter)(nil).MethodFunc), method, pattern, h)
}

// MethodNotAllowed mocks base method.
func (m *MockRouter) MethodNotAllowed(h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MethodNotAllowed", h)
}

// MethodNotAllowed indicates an expected call of MethodNotAllowed.
func (mr *MockRouterMockRecorder) MethodNotAllowed(h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MethodNotAllowed", reflect.TypeOf((*MockRouter)(nil).MethodNotAllowed), h)
}

// Middlewares mocks base method.
func (m *MockRouter) Middlewares() chi.Middlewares {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Middlewares")
	ret0, _ := ret[0].(chi.Middlewares)
	return ret0
}

// Middlewares indicates an expected call of Middlewares.
func (mr *MockRouterMockRecorder) Middlewares() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Middlewares", reflect.TypeOf((*MockRouter)(nil).Middlewares))
}

// Mount mocks base method.
func (m *MockRouter) Mount(pattern string, h http0.Handler) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Mount", pattern, h)
}

// Mount indicates an expected call of Mount.
func (mr *MockRouterMockRecorder) Mount(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mount", reflect.TypeOf((*MockRouter)(nil).Mount), pattern, h)
}

// NotFound mocks base method.
func (m *MockRouter) NotFound(h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "NotFound", h)
}

// NotFound indicates an expected call of NotFound.
func (mr *MockRouterMockRecorder) NotFound(h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NotFound", reflect.TypeOf((*MockRouter)(nil).NotFound), h)
}

// Options mocks base method.
func (m *MockRouter) Options(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Options", pattern, h)
}

// Options indicates an expected call of Options.
func (mr *MockRouterMockRecorder) Options(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Options", reflect.TypeOf((*MockRouter)(nil).Options), pattern, h)
}

// Patch mocks base method.
func (m *MockRouter) Patch(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Patch", pattern, h)
}

// Patch indicates an expected call of Patch.
func (mr *MockRouterMockRecorder) Patch(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Patch", reflect.TypeOf((*MockRouter)(nil).Patch), pattern, h)
}

// Post mocks base method.
func (m *MockRouter) Post(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Post", pattern, h)
}

// Post indicates an expected call of Post.
func (mr *MockRouterMockRecorder) Post(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Post", reflect.TypeOf((*MockRouter)(nil).Post), pattern, h)
}

// Put mocks base method.
func (m *MockRouter) Put(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Put", pattern, h)
}

// Put indicates an expected call of Put.
func (mr *MockRouterMockRecorder) Put(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockRouter)(nil).Put), pattern, h)
}

// Route mocks base method.
func (m *MockRouter) Route(pattern string, fn func(chi.Router)) chi.Router {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Route", pattern, fn)
	ret0, _ := ret[0].(chi.Router)
	return ret0
}

// Route indicates an expected call of Route.
func (mr *MockRouterMockRecorder) Route(pattern, fn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Route", reflect.TypeOf((*MockRouter)(nil).Route), pattern, fn)
}

// Routes mocks base method.
func (m *MockRouter) Routes() []chi.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Routes")
	ret0, _ := ret[0].([]chi.Route)
	return ret0
}

// Routes indicates an expected call of Routes.
func (mr *MockRouterMockRecorder) Routes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Routes", reflect.TypeOf((*MockRouter)(nil).Routes))
}

// ServeHTTP mocks base method.
func (m *MockRouter) ServeHTTP(arg0 http0.ResponseWriter, arg1 *http0.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ServeHTTP", arg0, arg1)
}

// ServeHTTP indicates an expected call of ServeHTTP.
func (mr *MockRouterMockRecorder) ServeHTTP(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServeHTTP", reflect.TypeOf((*MockRouter)(nil).ServeHTTP), arg0, arg1)
}

// Trace mocks base method.
func (m *MockRouter) Trace(pattern string, h http0.HandlerFunc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Trace", pattern, h)
}

// Trace indicates an expected call of Trace.
func (mr *MockRouterMockRecorder) Trace(pattern, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockRouter)(nil).Trace), pattern, h)
}

// Use mocks base method.
func (m *MockRouter) Use(middlewares ...func(http0.Handler) http0.Handler) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range middlewares {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Use", varargs...)
}

// Use indicates an expected call of Use.
func (mr *MockRouterMockRecorder) Use(middlewares ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Use", reflect.TypeOf((*MockRouter)(nil).Use), middlewares...)
}

// With mocks base method.
func (m *MockRouter) With(middlewares ...func(http0.Handler) http0.Handler) chi.Router {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range middlewares {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "With", varargs...)
	ret0, _ := ret[0].(chi.Router)
	return ret0
}

// With indicates an expected call of With.
func (mr *MockRouterMockRecorder) With(middlewares ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "With", reflect.TypeOf((*MockRouter)(nil).With), middlewares...)
}

// MockFactory is a mock of Factory interface.
type MockFactory struct {
	ctrl     *gomock.Controller
	recorder *MockFactoryMockRecorder
	isgomock struct{}
}

// MockFactoryMockRecorder is the mock recorder for MockFactory.
type MockFactoryMockRecorder struct {
	mock *MockFactory
}

// NewMockFactory creates a new mock instance.
func NewMockFactory(ctrl *gomock.Controller) *MockFactory {
	mock := &MockFactory{ctrl: ctrl}
	mock.recorder = &MockFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFactory) EXPECT() *MockFactoryMockRecorder {
	return m.recorder
}

// NewRouter mocks base method.
func (m *MockFactory) NewRouter(opts ...http.Option) (http.Router, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "NewRouter", varargs...)
	ret0, _ := ret[0].(http.Router)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewRouter indicates an expected call of NewRouter.
func (mr *MockFactoryMockRecorder) NewRouter(opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewRouter", reflect.TypeOf((*MockFactory)(nil).NewRouter), opts...)
}
